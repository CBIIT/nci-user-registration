#!/usr/bin/perl

use Net::LDAP;
use Authen::SASL;
use XML::LibXML;
use LWP::UserAgent;
use Data::Dumper;
use Config::Properties;
use Log::Log4perl;
use Mail::Sendmail qw/sendmail/;

use strict;

Log::Log4perl::init('/local/content/batchprocessor/conf/log4perl.properties');

my $xpc=XML::LibXML::XPathContext->new;
my $conf = Config::Properties->
    new(file => '/local/content/batchprocessor/conf/batchprocessor.properties')->getProperties;
my $logger = Log::Log4perl->get_logger('batchprocessor');

sub expandString ($$$) {
    my $format = shift;
    my $xmlrecord = shift;
    my $ldapentry = shift;
    if ($format =~ /^format:(.*)$/) {
        my $value=$1;
        $value=~s/\{(.+?)\}/expandString($1,$xmlrecord,$ldapentry)/ge;
        return "$value";
    } elsif ($format =~ /^xpath:(.*)$/) {
        my $value=$xpc->find($1,$xmlrecord);
        return "$value";
    } else {
        my $value=$ldapentry->get_value($format);
        return "$value";
    }
}

sub warning ($$) {
    my $warnings=shift;
    my $message=shift;
    push @$warnings,$message;
}

sub healthcheck($) {
    my $struct={};
    my $result;
    eval {
        $logger->info("Running preflight checks");
        $logger->debug("Trying to connect to $conf->{'ldap.direct.host'}");
        my @ldaphost = split / +/,$conf->{'ldap.direct.host'};
        my $ldap = Net::LDAP->new(@ldaphost, port => $conf->{'ldap.direct.port'});
        $logger->debug("Trying to start TLS to $conf->{'ldap.direct.host'}"); 
        $result=$ldap->start_tls(
            verify => 'require', sslversion => 'tlsv1', clientcert => $conf->{'ssl.cert'},
            clientkey => $conf->{'ssl.key'}, capath => $conf->{'ssl.capath'}
        );
        $result->code && die "Unable to start TLS for direct LDAP connection: ".$result->error."\n";
        $logger->debug("Trying to establish SASL/EXTERNAL bind to $conf->{'ldap.direct.host'}");
        my $ldapsasl=Authen::SASL->new(mechanism => 'EXTERNAL', callback => { user => ''}) or die "$@";
        $result=$ldap->bind(sasl => $ldapsasl);

        $logger->debug("Searching for LDAP User Base $conf->{'ldap.base.user'} on $conf->{'ldap.direct.host'}");
        $result=$ldap->search(
            base => $conf->{'ldap.base.user'},
            scope => 'base',
            filter => '(objectclass=*)',
            attrs => [ 'cn', ] ,
        );

        $logger->debug("Searching for LDAP Group Base $conf->{'ldap.base.group'} on $conf->{'ldap.direct.host'}");
        $result=$ldap->search(
            base => $conf->{'ldap.base.group'},
            scope => 'base',
            filter => '(objectclass=*)',
            attrs => [ 'cn', ] ,
        );

        $logger->debug("Trying to connect to $conf->{'ldap.proxy.host'}"); 
        my @proxyhost = split / +/,$conf->{'ldap.proxy.host'};
        my $proxy = Net::LDAP->new(@proxyhost, port => $conf->{'ldap.proxy.port'}, onerror => 'die') or die "LDAP Proxy Connection failed: '$@'\n";
        $logger->debug("Trying to start TLS to $conf->{'ldap.proxy.host'}"); 
        $result=$proxy->start_tls(
            verify => 'require', sslversion => 'tlsv1', clientcert => $conf->{'ssl.cert'},
            clientkey => $conf->{'ssl.key'}, capath => $conf->{'ssl.capath'}
        );
        $result->code && die "Unable to start TLS for Proxy LDAP connection: ", $result->error, "\n";
        $logger->debug("Trying to establish SASL/EXTERNAL bind to $conf->{'ldap.proxy.host'}");
        my $proxysasl=Authen::SASL->new(mechanism => 'EXTERNAL', callback => { user => ''}) or die "$@";
        $result=$proxy->bind(sasl => $proxysasl);

        $logger->debug("Searching for LDAP User Base $conf->{'ldap.base.user'} on $conf->{'ldap.proxy.host'}");
        $result=$proxy->search(
            base => $conf->{'ldap.base.user'},
            scope => 'base',
            filter => '(objectclass=*)',
            attrs => [ 'cn', ] ,
        );

        $logger->debug("Searching for LDAP Group Base $conf->{'ldap.base.group'} on $conf->{'ldap.proxy.host'}");
        $result=$proxy->search(
            base => $conf->{'ldap.base.group'},
            scope => 'base',
            filter => '(objectclass=*)',
            attrs => [ 'cn', ] ,
        );
        $logger->info("Preflight checks passed.");
        $struct->{"direct"}=$ldap;
        $struct->{"proxy"}=$proxy
    };

    if ($@) {
        $struct->{'error'}=1;
        $struct->{'message'}=$@;
    }

    return $struct;
}

my @warnings=();


my $result;

my $ldap=healthcheck($conf);

if ($ldap->{'error'}) {
    my $error=$ldap->{'message'};
    $logger->info("Critical error encountered. Sending alert.");
    $logger->error($error);
    my $message=<<"HERE";
Encountered a critical error during batch processing:

$error

Processing cannot proceed until this issue is resolved.

Please review application logs for more details and increase logging level as needed to capture further details during subsequent attempts.
HERE
    my %mail = (
        To => $conf->{'mail.to'},
        From => $conf->{'mail.from'},
        Subject => $conf->{'mail.subject.error'},
        Message => $message);
    if (!sendmail(%mail)) {
        $logger->error($Mail::Sendmail::error);
    } else {
        $logger->info("Message queued successfully.");
        $logger->debug($Mail::Sendmail::log);
    }
    exit 1;
}

my @services = split(/\s+/,$conf->{'portal.services'});

SERVICE: for my $service (@services) {
    my @updated=();
    $logger->info("Checking for new ",$conf->{"$service.title"});
    my @attrlist = split(/\s+/,$conf->{"$service.attributes"});

    my $ua=LWP::UserAgent->new;
    my $response=$ua->get($conf->{"$service.get"});
    if (!$response) {
        $logger->warn("$service endpoint unavailable, skipping service for now.");
        warning(\@warnings,"Service unreachable: ".($conf->{"$service.get"})."; skipping...");
        next SERVICE;
    }
    my $xmldoc;
    if ($response->is_success) {
        $xmldoc=$response->decoded_content;
    } else {
        $logger->warn("$service endpoint returned invalid XML content, skipping service for now.");
        warning(\@warnings,"Service error: ".($conf->{"$service.get"})."\n\tError retrieving XML data: ".($response->status_line));
        next SERVICE;
    }

    my $dom=XML::LibXML->load_xml(string => $xmldoc);
    my @records = $xpc->findnodes("/users/item",$dom);
    $logger->info("There are ".(scalar @records)." records waiting to be processed");

    RECORD: for my $record (@records) {
        my $edirdn=$xpc->find("dn",$record);
        $logger->info("Legacy eDir DN: $edirdn");
        my $newdn=$xpc->find($conf->{"xpath.dn"},$record);
        my @changes=();
        $result=$ldap->{'proxy'}->search(
            base => "$newdn",
            scope => 'base',
            filter => '(objectclass=*)',
            attrs => \@attrlist,
        );
        if (! $result->count ) {
            $logger->warn("$newdn not yet in LDAP, skipping for now.");
            warning(\@warnings,"Warning: $newdn not yet in LDAP, may not yet have replicated. Skipping.");
            next RECORD;
        }
        my $ldaprecord=$result->entry(0);
        $logger->debug(Dumper($result));
        $logger->info("New DN: $newdn");
        for my $attr (@attrlist) {
            next unless ($attr=~/^x-nci-/ && $conf->{"map.$attr"});
            my $format=$conf->{"map.$attr"};
            my $value=expandString($format,$record,$result->entry(0));
            if ($value ne "" ) {
                $logger->info("\tReplace:\t$attr: $value");
                push @changes,(replace => [$attr,$value]);
            } elsif ($conf->{"clear.$attr"} =~/^true$/i) {
                if (scalar $ldaprecord->get_value($attr)) {
                    push @changes,(delete => [$attr => [] ]);
                }
            }
        }
        if (@changes) {
            $logger->info("Applying updated attributes for $newdn");
            $logger->debug(Dumper(@changes));
            eval {
                $result=$ldap->{'proxy'}->modify( "$newdn", changes => \@changes );
            };
            if ( $@ ) {
                $logger->warn("Attribute update failed for $newdn: $@");
                warning(\@warnings, "Unable to apply changes to $newdn.\nError: $@");
                next RECORD;
            } else {
                $logger->info("Successfully updated attributes for $newdn");
            }
        } else {
            $logger->info("No changed attributes for $newdn");
        }
        my @edirgroups=$xpc->findnodes($conf->{'xpath.memberOf'},$record);
        my %adgroups=map {$_ => 1} $ldaprecord->get_value('memberOf');
        for my $groupnode (@edirgroups) {
            my $legacygroupdn = scalar $groupnode;
            eval {
                $result = $ldap->{'proxy'}->search(
                    base => $conf->{'ldap.base.group'},
                    scope => 'sub',
                    filter => "(x-nci-legacy-dn=$legacygroupdn)",
                    attrs => [ 'distinguishedName']
                );
            };
            if ((!$@) && $result->count) {
                my $newgroupdn=$result->entry(0)->get_value('distinguishedName');
                $logger->info("Found matching group:\n\t$legacygroupdn =>\n\t$newgroupdn");
                if (!$adgroups{$newgroupdn}) {
                    $logger->info("Adding new member: $newdn... ");
                    eval {
                        my $result=$ldap->{'direct'}->modify($newgroupdn, add => [ 'member', $newdn ]);
                    };
                    if (! $@) {
                        $logger->info("Success");
                    } else {
                        $logger->warn("Unable to add $newdn to group $newgroupdn. Skipping remaining groups.");
                        warning(\@warnings, "Unable to add $newdn to group $newgroupdn. Skipping any remaining groups. Will retry later.\nError: $@");
                        next RECORD;
                    }
                } else {
                    $logger->debug("Ignoring existing member: $newdn");
                }
            } else {
                $logger->debug("Skipping non-migrated group: $legacygroupdn");
            }
        }
        push @updated, scalar ($xpc->find('_id',$record));
    }

    if (scalar @updated) {
        my $message="<userids>\n";
        map {$message.="<value>$_</value>\n"} @updated;
        $message.="</userids>";
        $logger->info("Sending update message to $service endpoint");
        $logger->debug($message);
        my $response=$ua->post($conf->{"$service.post"},Content_Type => 'application/xml',Content=>$message);
        if ($response->is_success) {
            $logger->info("Successfully posted update to portal service interface.");
        } else {
            $logger->warn("Unable to post update to $service endpoint");
            warning(\@warnings,"Unable to post the following message to ".$conf->{"$service.post"}.":\n$message");
        }
    }
}
$ldap->{'direct'}->unbind();
$ldap->{'proxy'}->unbind();

$logger->info("End of batch.");

if (scalar @warnings) {
    $logger->info("Batch ended with warnings. Sending alert.");
    my $warnings=join "\n",@warnings;
    my $message=<<"HERE";
One or more non-fatal errors were encountered during batch processing. Problem services and records were skipped and will be retried until successful or manually removed from the batch.

Warnings:

$warnings

Please review application logs for more details and increase logging level as needed to capture further details during subsequent attempts.
HERE
    my %mail = (
        To => $conf->{'mail.to'},
        From => $conf->{'mail.from'},
        Subject => $conf->{'mail.subject.warn'},
        Message => $message);
    if (!sendmail(%mail)) {
        $logger->error($Mail::Sendmail::error);
    } else {
        $logger->info("Message queued successfully.");
        $logger->debug($Mail::Sendmail::log);
    }
}
